#! /bin/bash
#$ -S /bin/bash
#$ -cwd
# (eg.) $ ./fasta2tre_bs.bsh <input_FASTA> <output_tre>
if [ ${#} -ne 2 ]
then
	if [ ${#} -lt 2 ]
	then
		echo "Too short argument!" 1>&2
	else
		echo "Too many arguments!" 1>&2
	fi
	echo "Usage: fasta2tre_bs.bsh [input] [output]" 1>&2
	exit 1
fi
# path to Phylip exe files
export PATH=${PATH}:/usr/local/pkg/phylip/current/exe

unum=${RANDOM}_${$} #for intermediate file name
infastafile=${1} #<input_FASTA>
lastoutfile=${2} #<output_tre>

# alignment
mafft --retree 2 --maxiterate 0 --thread 1 --phylipout ${infastafile} > ${unum}.phy
ret=${?}
if [ ${ret} -gt 0 ]
then
	echo "mafft error (${ret})" 1>&2
	exit 1
fi

# Original data
#dnaml
infilename=${unum}.phy
outfilename=${unum}.dnaml # outfilename=${unum}.dist
outtreefilename=${unum}.tre #add_bootstrap.pl < input_tre file
conffilename=in_dnaml_${unum} # conffilename=in_dnadist_${unum}
# Please enter a new file name>
echo "${infilename}
f
${outfilename}
y
f
${outtreefilename}" > ${conffilename} #recored of user key stroke

if [ ! -e outfile ]
then
	> outfile
fi
if [ ! -e outtree ]
then
	> outtree
fi
if [ -e infile ]
then
	rm infile
fi
if [ -e ${outfilename} ]
then
	rm ${outfilename}
fi
if [ -e ${outtreefilename} ]
then
	rm ${outtreefilename}
fi
dnaml < ${conffilename}
ret=${?}
if [ ${ret} -gt 0 ]
then
	echo "dnaml (original data) error (${ret})" 1>&2
	exit 1
fi



# Making bootstrap data
# seqboot
infilename=${unum}.phy
outfilename=${unum}.boot
conffilename=in_seqboot_${unum}

echo "${infilename}
r
500
y
1
f
${outfilename}" > ${conffilename}

if [ ! -e outfile ]
then
	> outfile
fi
if [ -e infile ]
then
	rm infile
fi
if [ -e ${outfilename} ]
then
	rm ${outfilename}
fi
seqboot < ${conffilename}
ret=${?}
if [ ${ret} -gt 0 ]
then
	echo "seqboot error (${ret})" 1>&2
	exit 1
fi

# Bootstrap data
# dnaml
infilename=${unum}.boot
outfilename=${unum}.boot.dnaml # outfilename=${unum}.boot.dist
outtreefilename=${unum}.boot.tre
conffilename=in_boot_dnaml_${unum} # conffilename=in_boot_dnadist_${unum}

echo "${infilename}
f
${outfilename}
m
d
500
5
3
y
f
${outtreefilename}" > ${conffilename}


if [ ! -e outfile ]
then
	> outfile
fi
if [ ! -e outtree ]
then
	> outtree
fi
if [ -e infile ]
then
	rm infile
fi
if [ -e ${outfilename} ]
then
	rm ${outfilename}
fi
if [ -e ${outtreefilename} ]
then
	rm ${outtreefilename}
fi
dnaml < ${conffilename}
ret=${?}
if [ ${ret} -gt 0 ]
then
	echo "dnaml (bootstrap data) error (${ret})" 1>&2
	exit 1
fi



# consense
intreefilename=${unum}.boot.tre
outfilename=${unum}.consense
outtreefilename=${unum}.consensus.tre
conffilename=in_consense_${unum}

echo "${intreefilename}
f
${outfilename}
y
f
${outtreefilename}" > ${conffilename}

if [ ! -e outfile ]
then
	> outfile
fi
if [ ! -e outtree ]
then
	> outtree
fi
if [ -e intree ]
then
	rm intree
fi
if [ -e ${outfilename} ]
then
	rm ${outfilename}
fi
if [ -e ${outtreefilename} ]
then
	rm ${outtreefilename}
fi
consense < ${conffilename}
ret=${?}
if [ ${ret} -gt 0 ]
then
	echo "consense error (${ret})" 1>&2
	exit 1
fi

# add bootstrap values to the original tree
perl add_bootstrap.pl ${unum}.tre ${unum}.consense ${lastoutfile}
ret=${?}
if [ ${ret} -gt 0 ]
then
	echo "add_bootstrap.pl error (${ret})" 1>&2
	exit 1
fi

